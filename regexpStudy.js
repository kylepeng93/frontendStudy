// $(function(){
//     $('[data-test]').each(function(e){
//         var $this = $(this);
//         // attr方法获取标签属性中保存的值
//         var value = $this.attr('data-test');
//         // data方法可以直接以后缀获取该属性的值
//         var value1 = $this.data('test');
//         $this.css("background", "rgb(123,234,44)");
//     })  
// })
// 第一题
/* 测试字符串的首字母是否是大写,规则如下：
    1. 首字母为英文字母 ^
    2. 为大写 [A-Z]
*/
var re = /^[A-Z]/; 
console.log(re.test('sttrinG'));
// 第二题
/* 测试信用卡的卡号是否正确，规则如下：
    1. 全部为数字 \d
    2. 12位数字（假设是12位） {12}
*/
re = /\d{12}/ 
console.log(re.test('123456789012')); // true
// 第三题
/* 匹配邮箱地址。规则如下：
    1. 包含@和.，@前后可以为任意英文数字和字符，.后面必须为数字和字母，且最少2位，最多3位。
    2. 邮箱字符为英文和数字 ^\w
    3. (.)和短横线(-)的字符 [\.-]?
*/
re = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
console.log(re.test('kylepeng93@gmail.com'));
// console.log(RegExp.$1);
// 第四题
/* 匹配字符串中的日期，规则如下：
    1. 以yyyy-MM-dd为例
*/
re = /^(?:[0-9]{2})?[0-9]{2}\-(1[0-2]|0?[1-9])\-(3[01]|[12][0-9]|0?[1-9])$/
console.log(re.test('1990-1-1')); // (yyyy-M-d)true
console.log(re.test('20-01-01'));// (yy-MM-dd)true
console.log(re.test('1990-01-01')); // (yyyy-MM-dd)true
// 第五题
/*  替换字符串中的首尾空格*/
re = /^\s+|\s+$/g; //注意最后的g必须要加上，代表全局查找
console.log(' tr  st  '.replace(re, ""));
/* 第六题
    判断合法IP地址
*/
re =  /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
console.log(re.test('12.12.12.12'));

// test
var re = /(\%)+/g;
var html = 'sss=%&bbb=%';
if(re.test(html)) {
    html = html.replace(re, function(word){
        
    })
}

String.format = function() {
    
}